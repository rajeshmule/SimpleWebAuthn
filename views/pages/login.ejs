<style>
    * {
    font-size: 16px;
    font-family: 'Courier New', Courier, monospace;
  }
  
  body {
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background: #f7f7f7;
  }
  
  h1 {
    font-size: 2.25rem;
  }
  
  h2 {
    font-size: 1.75rem;
  }
  
  button {
    padding: 0.5rem;
    background: white;
    border-radius: 0.25rem;
  }
  
  button:active {
    background: #eeeeee;
  }
  
  button:hover {
    background: #efefef;
  }
  
  .container {
    max-width: 70rem;
    margin: auto;
    text-align: center;
  }
  
  #error {
    color: red;
  }
  
  #success {
    color: #11a000;
  }
  
  /* Desktop Styles */
  @media(min-width: 75rem) {
    * {
      font-size: 24px;
    }
  }
  
  </style>
   <script src="https://unpkg.com/@simplewebauthn/browser@0.9.0/dist/simplewebauthn-browser.min.js"></script>
<div class="container">
    <p>
      <span>‚¨ÖÔ∏è&nbsp;<a href="/">Go Back</a></span>
    </p>
    <h1>üîê&nbsp;Login</h1>
    <h2>(a.k.a. "Assertion")</h2>
    <button id="btnBegin">Begin Login</button>
    <p id="success"></p>
    <p id="error"></p>
  </div>
  <script>
    const elemBegin = document.getElementById('btnBegin');
    const elemSuccess = document.getElementById('success');
    const elemError = document.getElementById('error');

    const { startAssertion, supportsWebauthn } = SimpleWebAuthnBrowser;

    // Hide the Begin button if the browser is incapable of using WebAuthn
    if (!supportsWebauthn()) {
      elemBegin.style.display = 'none';
      elemError.innerText = 'It seems this browser doesn\'t support WebAuthn...';
    }

    elemBegin.addEventListener('click', async () => {
      // Reset success/error messages
      elemSuccess.innerHTML = '';
      elemError.innerHTML = '';

      const resp = await fetch('/generate-assertion-options');

      let asseResp;
      try {
        const opts = await resp.json();
        asseResp = await startAssertion(opts);
      } catch (error) {
        elemError.innerText = error;
        throw new Error(error);
      }

      const verificationResp = await fetch('/verify-assertion', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(asseResp),
      });

      const verificationJSON = await verificationResp.json();

      if (verificationJSON && verificationJSON.verified) {
        elemSuccess.innerHTML = 'Success! <a href="/register">Try to register again?</a>&nbsp;üö™';
      } else {
        elemError.innerHTML = `Oh no, something went wrong! Response: <pre>${JSON.stringify(
          verificationJSON,
        )}</pre>`;
      }
    });
  </script>